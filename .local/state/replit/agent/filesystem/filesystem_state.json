{"file_contents":{"app.py":{"content":"import os\nimport logging\nimport markdown\nfrom flask import Flask, request, render_template, send_file, flash, redirect, url_for, jsonify\nfrom werkzeug.utils import secure_filename\nfrom weasyprint import HTML, CSS\nfrom docx import Document\nimport io\nimport tempfile\nimport uuid\nfrom datetime import datetime\nfrom email_service import send_advertiser_contact_email, send_confirmation_email\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\n\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"dev-secret-key-change-in-production\")\n\n# Database configuration\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\ndb.init_app(app)\n\n# Configuration\nUPLOAD_FOLDER = 'uploads'\nALLOWED_EXTENSIONS = {'md', 'markdown'}\nMAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB max file size\n\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\napp.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n\n# Create upload directory if it doesn't exist\nif not os.path.exists(UPLOAD_FOLDER):\n    os.makedirs(UPLOAD_FOLDER)\n\ndef allowed_file(filename):\n    \"\"\"Check if file has allowed extension\"\"\"\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\ndef cleanup_old_files():\n    \"\"\"Remove files older than 1 hour from uploads directory\"\"\"\n    try:\n        current_time = datetime.now()\n        for filename in os.listdir(UPLOAD_FOLDER):\n            if filename == '.gitkeep':\n                continue\n            filepath = os.path.join(UPLOAD_FOLDER, filename)\n            if os.path.isfile(filepath):\n                file_time = datetime.fromtimestamp(os.path.getctime(filepath))\n                if (current_time - file_time).seconds > 3600:  # 1 hour\n                    os.remove(filepath)\n                    logging.info(f\"Removed old file: {filename}\")\n    except Exception as e:\n        logging.error(f\"Error cleaning up files: {e}\")\n\n@app.route('/')\ndef index():\n    \"\"\"Main page\"\"\"\n    cleanup_old_files()\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    \"\"\"Handle file upload\"\"\"\n    try:\n        if 'file' not in request.files:\n            flash('No file selected', 'error')\n            return redirect(url_for('index'))\n        \n        file = request.files['file']\n        \n        if file.filename == '':\n            flash('No file selected', 'error')\n            return redirect(url_for('index'))\n        \n        if not allowed_file(file.filename):\n            flash('Please upload a valid Markdown file (.md or .markdown)', 'error')\n            return redirect(url_for('index'))\n        \n        # Generate unique filename to avoid conflicts\n        unique_id = str(uuid.uuid4())\n        filename = f\"{unique_id}_{secure_filename(file.filename)}\"\n        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n        \n        file.save(filepath)\n        \n        # Read and process the markdown content\n        with open(filepath, 'r', encoding='utf-8') as f:\n            content = f.read()\n        \n        # Convert markdown to HTML for preview\n        html_content = markdown.markdown(\n            content, \n            extensions=['extra', 'tables', 'codehilite', 'toc']\n        )\n        \n        flash('File uploaded successfully!', 'success')\n        return render_template('index.html', \n                             preview_content=html_content, \n                             filename=filename,\n                             original_filename=file.filename)\n        \n    except Exception as e:\n        logging.error(f\"Upload error: {e}\")\n        flash(f'Error uploading file: {str(e)}', 'error')\n        return redirect(url_for('index'))\n\n@app.route('/download/<format>/<filename>')\ndef download_file(format, filename):\n    \"\"\"Download converted file\"\"\"\n    try:\n        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n        \n        if not os.path.exists(filepath):\n            flash('File not found. Please upload a file first.', 'error')\n            return redirect(url_for('index'))\n        \n        # Read markdown content\n        with open(filepath, 'r', encoding='utf-8') as f:\n            md_content = f.read()\n        \n        # Convert markdown to HTML\n        html_content = markdown.markdown(\n            md_content, \n            extensions=['extra', 'tables', 'codehilite', 'toc']\n        )\n        \n        # Add CSS styling for better formatting\n        styled_html = f\"\"\"\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <meta charset=\"UTF-8\">\n            <style>\n                body {{\n                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n                    line-height: 1.6;\n                    color: #333;\n                    max-width: 800px;\n                    margin: 0 auto;\n                    padding: 20px;\n                }}\n                h1, h2, h3, h4, h5, h6 {{\n                    color: #2c3e50;\n                    margin-top: 24px;\n                    margin-bottom: 12px;\n                }}\n                code {{\n                    background-color: #f8f9fa;\n                    padding: 2px 4px;\n                    border-radius: 3px;\n                    font-family: 'Monaco', 'Courier New', monospace;\n                }}\n                pre {{\n                    background-color: #f8f9fa;\n                    padding: 12px;\n                    border-radius: 5px;\n                    overflow-x: auto;\n                }}\n                blockquote {{\n                    border-left: 4px solid #ddd;\n                    margin: 0;\n                    padding-left: 16px;\n                    color: #666;\n                }}\n                table {{\n                    border-collapse: collapse;\n                    width: 100%;\n                    margin: 16px 0;\n                }}\n                table th, table td {{\n                    border: 1px solid #ddd;\n                    padding: 8px;\n                    text-align: left;\n                }}\n                table th {{\n                    background-color: #f2f2f2;\n                }}\n            </style>\n        </head>\n        <body>\n            {html_content}\n        </body>\n        </html>\n        \"\"\"\n        \n        if format == 'pdf':\n            # Convert to PDF\n            html_doc = HTML(string=styled_html)\n            pdf_io = io.BytesIO()\n            html_doc.write_pdf(pdf_io)\n            pdf_io.seek(0)\n            \n            # Get original filename without extension and unique ID\n            original_name = filename.split('_', 1)[1] if '_' in filename else filename\n            base_name = os.path.splitext(original_name)[0]\n            \n            return send_file(\n                pdf_io,\n                as_attachment=True,\n                download_name=f'{base_name}.pdf',\n                mimetype='application/pdf'\n            )\n            \n        elif format == 'docx':\n            # Convert to Word document\n            doc = Document()\n            \n            # Add title if present\n            lines = md_content.split('\\n')\n            for line in lines:\n                line = line.strip()\n                if line.startswith('# '):\n                    doc.add_heading(line[2:], 0)\n                elif line.startswith('## '):\n                    doc.add_heading(line[3:], 1)\n                elif line.startswith('### '):\n                    doc.add_heading(line[4:], 2)\n                elif line.startswith('#### '):\n                    doc.add_heading(line[5:], 3)\n                elif line and not line.startswith('#'):\n                    doc.add_paragraph(line)\n            \n            doc_io = io.BytesIO()\n            doc.save(doc_io)\n            doc_io.seek(0)\n            \n            # Get original filename without extension and unique ID\n            original_name = filename.split('_', 1)[1] if '_' in filename else filename\n            base_name = os.path.splitext(original_name)[0]\n            \n            return send_file(\n                doc_io,\n                as_attachment=True,\n                download_name=f'{base_name}.docx',\n                mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n            )\n        else:\n            flash('Invalid download format', 'error')\n            return redirect(url_for('index'))\n            \n    except Exception as e:\n        logging.error(f\"Download error: {e}\")\n        flash(f'Error converting file: {str(e)}', 'error')\n        return redirect(url_for('index'))\n\n@app.errorhandler(413)\ndef too_large(e):\n    flash('File too large. Maximum size is 16MB.', 'error')\n    return redirect(url_for('index'))\n\n@app.errorhandler(404)\ndef not_found(e):\n    return render_template('index.html'), 404\n\n@app.errorhandler(500)\ndef server_error(e):\n    flash('An internal server error occurred. Please try again.', 'error')\n    return redirect(url_for('index'))\n\n# Initialize database tables\nwith app.app_context():\n    import models\n    db.create_all()\n\n@app.route('/contact-advertiser', methods=['GET', 'POST'])\ndef contact_advertiser():\n    \"\"\"Handle advertiser contact form\"\"\"\n    if request.method == 'GET':\n        # Get the ad location from query parameter\n        ad_location = request.args.get('location', 'General Inquiry')\n        return render_template('contact_form.html', ad_location=ad_location)\n    \n    try:\n        # Get form data\n        name = request.form.get('name', '').strip()\n        email = request.form.get('email', '').strip()\n        company = request.form.get('company', '').strip()\n        message = request.form.get('message', '').strip()\n        ad_location = request.form.get('ad_location', 'General Inquiry')\n        \n        # Basic validation\n        if not all([name, email, message]):\n            flash('Please fill in all required fields.', 'error')\n            return render_template('contact_form.html', \n                                 name=name, email=email, company=company, \n                                 message=message, ad_location=ad_location)\n        \n        # Email validation\n        if '@' not in email or '.' not in email:\n            flash('Please enter a valid email address.', 'error')\n            return render_template('contact_form.html',\n                                 name=name, email=email, company=company,\n                                 message=message, ad_location=ad_location)\n        \n        # Get user IP and user agent\n        user_ip = request.environ.get('HTTP_X_FORWARDED_FOR', request.environ.get('REMOTE_ADDR', ''))\n        user_agent = request.headers.get('User-Agent', '')\n        \n        # Rate limiting check\n        from models import ContactSubmission\n        if not ContactSubmission.can_submit(user_ip, email):\n            flash('Please wait 2 minutes before submitting another inquiry.', 'warning')\n            return render_template('contact_form.html',\n                                 name=name, email=email, company=company,\n                                 message=message, ad_location=ad_location)\n        \n        # Send email\n        success, error_msg = send_advertiser_contact_email(name, email, company, message, ad_location)\n        \n        # Save to database\n        submission = ContactSubmission(\n            ip_address=user_ip,\n            email=email,\n            name=name,\n            company=company,\n            ad_location=ad_location,\n            message=message,\n            email_sent=success,\n            user_agent=user_agent\n        )\n        \n        db.session.add(submission)\n        db.session.commit()\n        \n        if success:\n            # Send confirmation email to user\n            send_confirmation_email(email, name)\n            flash('Thank you for your inquiry! We\\'ll get back to you within 24 hours.', 'success')\n            return redirect(url_for('index'))\n        else:\n            flash(f'Sorry, there was an issue sending your message: {error_msg}', 'error')\n            return render_template('contact_form.html',\n                                 name=name, email=email, company=company,\n                                 message=message, ad_location=ad_location)\n            \n    except Exception as e:\n        logging.error(f\"Contact form error: {e}\")\n        flash('An unexpected error occurred. Please try again later.', 'error')\n        return render_template('contact_form.html')\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":12741},"email_service.py":{"content":"import os\nimport sys\nfrom sendgrid import SendGridAPIClient\nfrom sendgrid.helpers.mail import Mail, Email, To, Content\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\ndef send_advertiser_contact_email(name, email, company, message, ad_location):\n    \"\"\"Send email notification when someone submits the advertiser contact form\"\"\"\n    \n    sendgrid_key = os.environ.get('SENDGRID_API_KEY')\n    if not sendgrid_key:\n        logger.error('SENDGRID_API_KEY environment variable is not set')\n        return False, 'Email service not configured'\n    \n    try:\n        sg = SendGridAPIClient(sendgrid_key)\n        \n        # Email content\n        html_content = f\"\"\"\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h2 style=\"color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px;\">\n                New Advertising Inquiry - MarkdownConverter\n            </h2>\n            \n            <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n                <h3 style=\"color: #495057; margin-top: 0;\">Contact Details</h3>\n                <p><strong>Name:</strong> {name}</p>\n                <p><strong>Email:</strong> {email}</p>\n                <p><strong>Company:</strong> {company}</p>\n                <p><strong>Ad Location Interest:</strong> {ad_location}</p>\n            </div>\n            \n            <div style=\"background-color: #ffffff; padding: 20px; border-left: 4px solid #007bff; margin: 20px 0;\">\n                <h3 style=\"color: #495057; margin-top: 0;\">Message</h3>\n                <p style=\"line-height: 1.6;\">{message}</p>\n            </div>\n            \n            <div style=\"background-color: #e9ecef; padding: 15px; border-radius: 8px; margin: 20px 0;\">\n                <p style=\"margin: 0; font-size: 14px; color: #6c757d;\">\n                    This email was sent from the MarkdownConverter website contact form.\n                    <br>Submitted from IP: (logged for security)\n                </p>\n            </div>\n        </div>\n        \"\"\"\n        \n        text_content = f\"\"\"\n        New Advertising Inquiry - MarkdownConverter\n        \n        Contact Details:\n        Name: {name}\n        Email: {email}\n        Company: {company}\n        Ad Location Interest: {ad_location}\n        \n        Message:\n        {message}\n        \n        This email was sent from the MarkdownConverter website contact form.\n        \"\"\"\n        \n        message = Mail(\n            from_email=Email(\"noreply@markdownconverter.com\", \"MarkdownConverter\"),\n            to_emails=To(\"simon@alpharock.net\"),\n            subject=f\"New Advertising Inquiry from {name} - {company}\",\n            html_content=html_content,\n            plain_text_content=text_content\n        )\n        \n        # Send the email\n        response = sg.send(message)\n        logger.info(f\"Email sent successfully. Status code: {response.status_code}\")\n        return True, 'Email sent successfully'\n        \n    except Exception as e:\n        logger.error(f\"SendGrid error: {str(e)}\")\n        return False, f'Failed to send email: {str(e)}'\n\n\ndef send_confirmation_email(user_email, name):\n    \"\"\"Send confirmation email to the user who submitted the form\"\"\"\n    \n    sendgrid_key = os.environ.get('SENDGRID_API_KEY')\n    if not sendgrid_key:\n        return False, 'Email service not configured'\n    \n    try:\n        sg = SendGridAPIClient(sendgrid_key)\n        \n        html_content = f\"\"\"\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h2 style=\"color: #007bff;\">Thank you for your interest in advertising!</h2>\n            \n            <p>Hi {name},</p>\n            \n            <p>Thank you for reaching out about advertising opportunities on MarkdownConverter. \n            We've received your inquiry and will get back to you within 24 hours.</p>\n            \n            <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n                <h3 style=\"color: #495057; margin-top: 0;\">What's Next?</h3>\n                <ul style=\"line-height: 1.6;\">\n                    <li>We'll review your advertising requirements</li>\n                    <li>Prepare a customized proposal for your needs</li>\n                    <li>Contact you with pricing and placement options</li>\n                </ul>\n            </div>\n            \n            <p>Best regards,<br>\n            The MarkdownConverter Team</p>\n            \n            <div style=\"border-top: 1px solid #dee2e6; padding-top: 15px; margin-top: 30px; font-size: 12px; color: #6c757d;\">\n                This is an automated confirmation email from MarkdownConverter.\n            </div>\n        </div>\n        \"\"\"\n        \n        message = Mail(\n            from_email=Email(\"noreply@markdownconverter.com\", \"MarkdownConverter\"),\n            to_emails=To(user_email),\n            subject=\"Thank you for your advertising inquiry - MarkdownConverter\",\n            html_content=html_content\n        )\n        \n        response = sg.send(message)\n        logger.info(f\"Confirmation email sent to {user_email}\")\n        return True, 'Confirmation sent'\n        \n    except Exception as e:\n        logger.error(f\"Failed to send confirmation email: {str(e)}\")\n        return False, 'Failed to send confirmation'","size_bytes":5406},"main.py":{"content":"from app import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":99},"models.py":{"content":"from app import db\nfrom datetime import datetime, timedelta\nfrom sqlalchemy import func\n\n\nclass FileUpload(db.Model):\n    \"\"\"Track file uploads and conversions\"\"\"\n    __tablename__ = 'file_uploads'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    filename = db.Column(db.String(255), nullable=False)\n    original_filename = db.Column(db.String(255), nullable=False)\n    file_size = db.Column(db.Integer, nullable=False)  # Size in bytes\n    upload_time = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)\n    ip_address = db.Column(db.String(45))  # IPv6 compatible\n    user_agent = db.Column(db.Text)\n    \n    # Conversion tracking\n    pdf_downloaded = db.Column(db.Boolean, default=False)\n    docx_downloaded = db.Column(db.Boolean, default=False)\n    pdf_download_time = db.Column(db.DateTime)\n    docx_download_time = db.Column(db.DateTime)\n    \n    def __repr__(self):\n        return f'<FileUpload {self.original_filename}>'\n    \n    @classmethod\n    def get_recent_uploads(cls, limit=10):\n        \"\"\"Get recent file uploads\"\"\"\n        return cls.query.order_by(cls.upload_time.desc()).limit(limit).all()\n    \n    @classmethod\n    def get_upload_stats(cls):\n        \"\"\"Get upload statistics\"\"\"\n        total_uploads = cls.query.count()\n        pdf_downloads = cls.query.filter(cls.pdf_downloaded == True).count()\n        docx_downloads = cls.query.filter(cls.docx_downloaded == True).count()\n        \n        # Get uploads from last 24 hours\n        from datetime import timedelta\n        yesterday = datetime.utcnow() - timedelta(days=1)\n        recent_uploads = cls.query.filter(cls.upload_time >= yesterday).count()\n        \n        return {\n            'total_uploads': total_uploads,\n            'pdf_downloads': pdf_downloads,\n            'docx_downloads': docx_downloads,\n            'recent_uploads': recent_uploads\n        }\n\n\nclass ConversionAnalytics(db.Model):\n    \"\"\"Track conversion analytics and performance\"\"\"\n    __tablename__ = 'conversion_analytics'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    file_upload_id = db.Column(db.Integer, db.ForeignKey('file_uploads.id'), nullable=False)\n    conversion_type = db.Column(db.String(10), nullable=False)  # 'pdf' or 'docx'\n    conversion_time = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)\n    processing_duration = db.Column(db.Float)  # Time in seconds\n    success = db.Column(db.Boolean, default=True)\n    error_message = db.Column(db.Text)\n    \n    # Relationship\n    file_upload = db.relationship('FileUpload', backref=db.backref('conversions', lazy=True))\n    \n    def __repr__(self):\n        return f'<Conversion {self.conversion_type} for {self.file_upload_id}>'\n    \n    @classmethod\n    def get_conversion_stats(cls):\n        \"\"\"Get conversion statistics\"\"\"\n        total_conversions = cls.query.count()\n        successful_conversions = cls.query.filter(cls.success == True).count()\n        failed_conversions = cls.query.filter(cls.success == False).count()\n        \n        # Average processing time\n        avg_processing_time = db.session.query(func.avg(cls.processing_duration)).filter(\n            cls.success == True\n        ).scalar() or 0\n        \n        # Conversion type breakdown\n        pdf_conversions = cls.query.filter(cls.conversion_type == 'pdf').count()\n        docx_conversions = cls.query.filter(cls.conversion_type == 'docx').count()\n        \n        return {\n            'total_conversions': total_conversions,\n            'successful_conversions': successful_conversions,\n            'failed_conversions': failed_conversions,\n            'avg_processing_time': round(avg_processing_time, 2) if avg_processing_time else 0,\n            'pdf_conversions': pdf_conversions,\n            'docx_conversions': docx_conversions,\n            'success_rate': round((successful_conversions / total_conversions * 100), 1) if total_conversions > 0 else 0\n        }\n\n\nclass SiteVisit(db.Model):\n    \"\"\"Track site visits for analytics\"\"\"\n    __tablename__ = 'site_visits'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    visit_time = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)\n    ip_address = db.Column(db.String(45))\n    user_agent = db.Column(db.Text)\n    referrer = db.Column(db.String(255))\n    page_visited = db.Column(db.String(100), default='/')\n    \n    def __repr__(self):\n        return f'<Visit {self.visit_time}>'\n    \n    @classmethod\n    def get_visit_stats(cls):\n        \"\"\"Get site visit statistics\"\"\"\n        from datetime import timedelta\n        \n        total_visits = cls.query.count()\n        \n        # Visits from last 24 hours\n        yesterday = datetime.utcnow() - timedelta(days=1)\n        recent_visits = cls.query.filter(cls.visit_time >= yesterday).count()\n        \n        # Unique visitors (based on IP)\n        unique_visitors = db.session.query(cls.ip_address).distinct().count()\n        \n        return {\n            'total_visits': total_visits,\n            'recent_visits': recent_visits,\n            'unique_visitors': unique_visitors\n        }\n\n\nclass ContactSubmission(db.Model):\n    \"\"\"Track contact form submissions for rate limiting and spam prevention\"\"\"\n    __tablename__ = 'contact_submissions'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    ip_address = db.Column(db.String(45), nullable=False)\n    email = db.Column(db.String(255), nullable=False)\n    name = db.Column(db.String(255), nullable=False)\n    company = db.Column(db.String(255))\n    ad_location = db.Column(db.String(100))\n    message = db.Column(db.Text, nullable=False)\n    submission_time = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)\n    email_sent = db.Column(db.Boolean, default=False)\n    user_agent = db.Column(db.Text)\n    \n    def __repr__(self):\n        return f'<ContactSubmission {self.email} at {self.submission_time}>'\n    \n    @classmethod\n    def can_submit(cls, ip_address, email):\n        \"\"\"Check if IP/email can submit (2 minute rate limit)\"\"\"\n        two_minutes_ago = datetime.utcnow() - timedelta(minutes=2)\n        \n        # Check IP rate limit\n        recent_ip_submission = cls.query.filter(\n            cls.ip_address == ip_address,\n            cls.submission_time >= two_minutes_ago\n        ).first()\n        \n        # Check email rate limit\n        recent_email_submission = cls.query.filter(\n            cls.email == email,\n            cls.submission_time >= two_minutes_ago\n        ).first()\n        \n        return recent_ip_submission is None and recent_email_submission is None\n    \n    @classmethod\n    def get_submission_stats(cls):\n        \"\"\"Get contact form submission statistics\"\"\"\n        total_submissions = cls.query.count()\n        successful_emails = cls.query.filter(cls.email_sent == True).count()\n        \n        # Recent submissions (last 24 hours)\n        yesterday = datetime.utcnow() - timedelta(days=1)\n        recent_submissions = cls.query.filter(cls.submission_time >= yesterday).count()\n        \n        return {\n            'total_submissions': total_submissions,\n            'successful_emails': successful_emails,\n            'recent_submissions': recent_submissions\n        }","size_bytes":7154},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"docx>=0.2.4\",\n    \"email-validator>=2.2.0\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"markdown>=3.8\",\n    \"psycopg2-binary>=2.9.10\",\n    \"python-docx>=1.1.2\",\n    \"sendgrid>=6.12.2\",\n    \"sqlalchemy>=2.0.41\",\n    \"weasyprint>=65.1\",\n    \"werkzeug>=3.1.3\",\n]\n","size_bytes":443},"attached_assets/main.py":{"content":"from flask import Flask, request, send_file, jsonify\nimport markdown\nimport os\nfrom weasyprint import HTML\nfrom docx import Document\nimport io\n\napp = Flask(__name__)\nUPLOAD_FOLDER = 'uploads'\nif not os.path.exists(UPLOAD_FOLDER):\n    os.makedirs(UPLOAD_FOLDER)\n\n@app.route('/')\ndef index():\n    return send_file('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    if 'file' not in request.files:\n        return jsonify({'success': False, 'error': 'No file uploaded'})\n    file = request.files['file']\n    if file.filename == '':\n        return jsonify({'success': False, 'error': 'No file selected'})\n    if file and file.filename.endswith(('.md', '.markdown')):\n        file_path = os.path.join(UPLOAD_FOLDER, 'uploaded.md')\n        file.save(file_path)\n        return jsonify({'success': True})\n    return jsonify({'success': False, 'error': 'Invalid file format'})\n\n@app.route('/download/<format>')\ndef download_file(format):\n    file_path = os.path.join(UPLOAD_FOLDER, 'uploaded.md')\n    if not os.path.exists(file_path):\n        return \"No file uploaded\", 400\n\n    with open(file_path, 'r') as f:\n        md_content = f.read()\n    \n    # Convert Markdown to HTML\n    html_content = markdown.markdown(md_content, extensions=['extra', 'tables'])\n\n    if format == 'pdf':\n        # Convert HTML to PDF using weasyprint\n        html = HTML(string=html_content)\n        pdf_io = io.BytesIO()\n        html.write_pdf(pdf_io)\n        pdf_io.seek(0)\n        return send_file(pdf_io, download_name='converted.pdf', as_attachment=True, mimetype='application/pdf')\n    \n    elif format == 'docx':\n        # Create Word document\n        doc = Document()\n        doc.add_paragraph(md_content)  # Simplified: add raw Markdown (can be enhanced)\n        doc_io = io.BytesIO()\n        doc.save(doc_io)\n        doc_io.seek(0)\n        return send_file(doc_io, download_name='converted.docx', as_attachment=True, mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document')\n    \n    return \"Invalid format\", 400\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080)","size_bytes":2111},"static/css/style.css":{"content":"/* Custom styles for MarkdownConverter */\n\n:root {\n    --preview-bg: #1a1a1a;\n    --preview-border: #444;\n    --code-bg: #2d2d2d;\n    --code-border: #555;\n}\n\n/* Markdown Preview Styles */\n.markdown-preview {\n    background-color: var(--preview-bg);\n    border: 1px solid var(--preview-border);\n    border-radius: 0.375rem;\n    padding: 1.5rem;\n    max-height: 600px;\n    overflow-y: auto;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    line-height: 1.6;\n}\n\n.markdown-preview h1,\n.markdown-preview h2,\n.markdown-preview h3,\n.markdown-preview h4,\n.markdown-preview h5,\n.markdown-preview h6 {\n    margin-top: 1.5rem;\n    margin-bottom: 0.75rem;\n    font-weight: 600;\n    color: #e9ecef;\n}\n\n.markdown-preview h1 {\n    font-size: 2rem;\n    border-bottom: 2px solid var(--bs-primary);\n    padding-bottom: 0.5rem;\n}\n\n.markdown-preview h2 {\n    font-size: 1.5rem;\n    border-bottom: 1px solid var(--preview-border);\n    padding-bottom: 0.25rem;\n}\n\n.markdown-preview p {\n    margin-bottom: 1rem;\n    color: #ced4da;\n}\n\n.markdown-preview ul,\n.markdown-preview ol {\n    margin-bottom: 1rem;\n    padding-left: 2rem;\n    color: #ced4da;\n}\n\n.markdown-preview li {\n    margin-bottom: 0.25rem;\n}\n\n.markdown-preview code {\n    background-color: var(--code-bg);\n    color: #f8f9fa;\n    padding: 0.125rem 0.25rem;\n    border-radius: 0.25rem;\n    font-family: 'Monaco', 'Courier New', monospace;\n    font-size: 0.875em;\n}\n\n.markdown-preview pre {\n    background-color: var(--code-bg);\n    border: 1px solid var(--code-border);\n    border-radius: 0.375rem;\n    padding: 1rem;\n    overflow-x: auto;\n    margin-bottom: 1rem;\n}\n\n.markdown-preview pre code {\n    background-color: transparent;\n    padding: 0;\n    border-radius: 0;\n    color: #f8f9fa;\n}\n\n.markdown-preview blockquote {\n    border-left: 4px solid var(--bs-primary);\n    margin: 1rem 0;\n    padding-left: 1rem;\n    color: #adb5bd;\n    font-style: italic;\n}\n\n.markdown-preview table {\n    width: 100%;\n    border-collapse: collapse;\n    margin-bottom: 1rem;\n    background-color: transparent;\n}\n\n.markdown-preview table th,\n.markdown-preview table td {\n    border: 1px solid var(--preview-border);\n    padding: 0.5rem;\n    text-align: left;\n    color: #ced4da;\n}\n\n.markdown-preview table th {\n    background-color: var(--code-bg);\n    font-weight: 600;\n    color: #f8f9fa;\n}\n\n.markdown-preview a {\n    color: var(--bs-primary);\n    text-decoration: none;\n}\n\n.markdown-preview a:hover {\n    text-decoration: underline;\n}\n\n.markdown-preview img {\n    max-width: 100%;\n    height: auto;\n    border-radius: 0.375rem;\n    margin: 0.5rem 0;\n}\n\n.markdown-preview hr {\n    border: none;\n    border-top: 2px solid var(--preview-border);\n    margin: 2rem 0;\n}\n\n/* File input styling */\n.form-control[type=\"file\"] {\n    padding: 0.5rem;\n}\n\n.form-control[type=\"file\"]::-webkit-file-upload-button {\n    background-color: var(--bs-secondary);\n    border: 1px solid var(--bs-border-color);\n    border-radius: 0.25rem;\n    color: var(--bs-body-color);\n    padding: 0.25rem 0.5rem;\n    margin-right: 0.5rem;\n    cursor: pointer;\n}\n\n.form-control[type=\"file\"]::-webkit-file-upload-button:hover {\n    background-color: var(--bs-secondary-bg);\n}\n\n/* Loading states */\n.btn.loading {\n    position: relative;\n    color: transparent;\n}\n\n.btn.loading::after {\n    content: \"\";\n    position: absolute;\n    width: 1rem;\n    height: 1rem;\n    top: 50%;\n    left: 50%;\n    margin-left: -0.5rem;\n    margin-top: -0.5rem;\n    border: 2px solid transparent;\n    border-top-color: currentColor;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n    .markdown-preview {\n        padding: 1rem;\n        max-height: 400px;\n    }\n    \n    .d-flex.gap-2 {\n        flex-direction: column;\n    }\n    \n    .d-flex.gap-2 .btn {\n        margin-bottom: 0.5rem;\n    }\n}\n\n/* Smooth transitions */\n.card,\n.btn,\n.alert {\n    transition: all 0.15s ease-in-out;\n}\n\n.card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);\n}\n\n/* Custom scrollbar for preview */\n.markdown-preview::-webkit-scrollbar {\n    width: 8px;\n}\n\n.markdown-preview::-webkit-scrollbar-track {\n    background: var(--preview-bg);\n    border-radius: 4px;\n}\n\n.markdown-preview::-webkit-scrollbar-thumb {\n    background: var(--bs-secondary);\n    border-radius: 4px;\n}\n\n.markdown-preview::-webkit-scrollbar-thumb:hover {\n    background: var(--bs-secondary-bg);\n}\n\n/* Focus states */\n.form-control:focus {\n    border-color: var(--bs-primary);\n    box-shadow: 0 0 0 0.25rem rgba(var(--bs-primary-rgb), 0.25);\n}\n\n/* Alert improvements */\n.alert {\n    border: none;\n    border-left: 4px solid;\n}\n\n.alert-success {\n    border-left-color: var(--bs-success);\n}\n\n.alert-danger {\n    border-left-color: var(--bs-danger);\n}\n\n.alert-info {\n    border-left-color: var(--bs-info);\n}\n\n/* Advertisement Space Styling */\n.ad-space {\n    transition: all 0.3s ease;\n    position: relative;\n    overflow: hidden;\n}\n\n.ad-space:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.2);\n}\n\n.ad-placeholder {\n    transition: all 0.3s ease;\n    cursor: pointer;\n    position: relative;\n}\n\n.ad-placeholder:hover {\n    transform: scale(1.02);\n}\n\n.banner-ad .ad-placeholder {\n    background-size: cover;\n    background-position: center;\n}\n\n/* Standard ad sizes */\n.ad-space.banner-ad .ad-placeholder {\n    min-height: 90px; /* 728x90 Leaderboard */\n}\n\n.ad-space:not(.banner-ad) .ad-placeholder {\n    min-height: 250px; /* 300x250 Medium Rectangle */\n}\n\n/* Mobile responsive ads */\n@media (max-width: 768px) {\n    .banner-ad .ad-placeholder {\n        min-height: 50px; /* Mobile banner */\n    }\n    \n    .ad-space:not(.banner-ad) .ad-placeholder {\n        min-height: 200px; /* Mobile medium rectangle */\n    }\n    \n    .banner-ad .ad-placeholder div h6 {\n        font-size: 0.9rem;\n    }\n    \n    .banner-ad .ad-placeholder small {\n        font-size: 0.7rem;\n    }\n}\n\n/* Ad loading animation */\n.ad-placeholder::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);\n    animation: shimmer 2s infinite;\n}\n\n@keyframes shimmer {\n    0% { left: -100%; }\n    100% { left: 100%; }\n}\n","size_bytes":6440},"static/js/app.js":{"content":"// MarkdownConverter JavaScript functionality\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize components\n    initFileUpload();\n    initDownloadButtons();\n    initScrollToTop();\n    \n    // Auto-dismiss alerts after 5 seconds\n    setTimeout(function() {\n        const alerts = document.querySelectorAll('.alert');\n        alerts.forEach(function(alert) {\n            const bsAlert = new bootstrap.Alert(alert);\n            bsAlert.close();\n        });\n    }, 5000);\n});\n\nfunction initFileUpload() {\n    const uploadForm = document.getElementById('uploadForm');\n    const fileInput = document.getElementById('file');\n    const loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'));\n    \n    if (uploadForm) {\n        uploadForm.addEventListener('submit', function(e) {\n            const file = fileInput.files[0];\n            \n            if (!file) {\n                e.preventDefault();\n                showAlert('Please select a file to upload.', 'warning');\n                return;\n            }\n            \n            // Validate file type\n            const allowedTypes = ['.md', '.markdown'];\n            const fileName = file.name.toLowerCase();\n            const isValidType = allowedTypes.some(type => fileName.endsWith(type));\n            \n            if (!isValidType) {\n                e.preventDefault();\n                showAlert('Please select a valid Markdown file (.md or .markdown).', 'danger');\n                return;\n            }\n            \n            // Validate file size (16MB)\n            const maxSize = 16 * 1024 * 1024;\n            if (file.size > maxSize) {\n                e.preventDefault();\n                showAlert('File size exceeds 16MB limit. Please select a smaller file.', 'danger');\n                return;\n            }\n            \n            // Show loading modal\n            loadingModal.show();\n            \n            // Add loading state to submit button\n            const submitBtn = uploadForm.querySelector('button[type=\"submit\"]');\n            if (submitBtn) {\n                submitBtn.classList.add('loading');\n                submitBtn.disabled = true;\n            }\n        });\n    }\n    \n    // File input change handler for immediate feedback\n    if (fileInput) {\n        fileInput.addEventListener('change', function(e) {\n            const file = e.target.files[0];\n            if (file) {\n                // Show file info\n                const fileInfo = document.createElement('div');\n                fileInfo.className = 'small text-muted mt-2';\n                fileInfo.innerHTML = `\n                    <i class=\"fas fa-file-alt me-1\"></i>\n                    Selected: ${file.name} (${formatFileSize(file.size)})\n                `;\n                \n                // Remove any existing file info\n                const existingInfo = fileInput.parentNode.querySelector('.file-info');\n                if (existingInfo) {\n                    existingInfo.remove();\n                }\n                \n                fileInfo.className += ' file-info';\n                fileInput.parentNode.appendChild(fileInfo);\n            }\n        });\n    }\n}\n\nfunction initDownloadButtons() {\n    const downloadButtons = document.querySelectorAll('a[href*=\"/download/\"]');\n    \n    downloadButtons.forEach(function(button) {\n        button.addEventListener('click', function(e) {\n            // Add loading state\n            const originalText = button.innerHTML;\n            button.innerHTML = '<i class=\"fas fa-spinner fa-spin me-2\"></i>Preparing download...';\n            button.classList.add('disabled');\n            \n            // Reset button after delay\n            setTimeout(function() {\n                button.innerHTML = originalText;\n                button.classList.remove('disabled');\n            }, 3000);\n        });\n    });\n}\n\nfunction initScrollToTop() {\n    // Create scroll to top button\n    const scrollBtn = document.createElement('button');\n    scrollBtn.className = 'btn btn-primary position-fixed';\n    scrollBtn.style.cssText = 'bottom: 20px; right: 20px; z-index: 1000; border-radius: 50%; width: 50px; height: 50px; display: none;';\n    scrollBtn.innerHTML = '<i class=\"fas fa-arrow-up\"></i>';\n    scrollBtn.title = 'Scroll to top';\n    \n    document.body.appendChild(scrollBtn);\n    \n    // Show/hide button based on scroll position\n    window.addEventListener('scroll', function() {\n        if (window.pageYOffset > 300) {\n            scrollBtn.style.display = 'block';\n        } else {\n            scrollBtn.style.display = 'none';\n        }\n    });\n    \n    // Smooth scroll to top\n    scrollBtn.addEventListener('click', function() {\n        window.scrollTo({\n            top: 0,\n            behavior: 'smooth'\n        });\n    });\n}\n\nfunction showAlert(message, type = 'info') {\n    // Create alert element\n    const alertDiv = document.createElement('div');\n    alertDiv.className = `alert alert-${type} alert-dismissible fade show`;\n    alertDiv.innerHTML = `\n        <i class=\"fas fa-${getAlertIcon(type)} me-2\"></i>\n        ${message}\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n    `;\n    \n    // Insert at the top of main content\n    const main = document.querySelector('main');\n    if (main) {\n        main.insertBefore(alertDiv, main.firstChild);\n        \n        // Auto-dismiss after 5 seconds\n        setTimeout(function() {\n            const bsAlert = new bootstrap.Alert(alertDiv);\n            bsAlert.close();\n        }, 5000);\n    }\n}\n\nfunction getAlertIcon(type) {\n    const icons = {\n        'success': 'check-circle',\n        'danger': 'exclamation-triangle',\n        'warning': 'exclamation-triangle',\n        'info': 'info-circle'\n    };\n    return icons[type] || 'info-circle';\n}\n\nfunction formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n// Prevent form resubmission on page refresh\nif (window.history.replaceState) {\n    window.history.replaceState(null, null, window.location.href);\n}\n\n// Enhanced file drag and drop functionality\nfunction initDragAndDrop() {\n    const fileInput = document.getElementById('file');\n    const uploadCard = fileInput?.closest('.card');\n    \n    if (!uploadCard || !fileInput) return;\n    \n    // Prevent default drag behaviors\n    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n        uploadCard.addEventListener(eventName, preventDefaults, false);\n        document.body.addEventListener(eventName, preventDefaults, false);\n    });\n    \n    // Highlight drop area when item is dragged over it\n    ['dragenter', 'dragover'].forEach(eventName => {\n        uploadCard.addEventListener(eventName, highlight, false);\n    });\n    \n    ['dragleave', 'drop'].forEach(eventName => {\n        uploadCard.addEventListener(eventName, unhighlight, false);\n    });\n    \n    // Handle dropped files\n    uploadCard.addEventListener('drop', handleDrop, false);\n    \n    function preventDefaults(e) {\n        e.preventDefault();\n        e.stopPropagation();\n    }\n    \n    function highlight(e) {\n        uploadCard.classList.add('border-primary');\n    }\n    \n    function unhighlight(e) {\n        uploadCard.classList.remove('border-primary');\n    }\n    \n    function handleDrop(e) {\n        const dt = e.dataTransfer;\n        const files = dt.files;\n        \n        if (files.length > 0) {\n            fileInput.files = files;\n            fileInput.dispatchEvent(new Event('change', { bubbles: true }));\n        }\n    }\n}\n\n// Initialize drag and drop when DOM is ready\ndocument.addEventListener('DOMContentLoaded', initDragAndDrop);\n","size_bytes":7795}}}