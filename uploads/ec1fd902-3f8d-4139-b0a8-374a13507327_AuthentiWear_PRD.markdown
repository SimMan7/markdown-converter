# Product Requirements Document (PRD): AuthentiWear MVP

**Version**: 1.0  
**Date**: May 23, 2025  
**Author**: [Your Name]

---

## 1. Introduction

### 1.1 Purpose
AuthentiWear is a smartwatch app for Apple Watch and Garmin watches that authenticates video content as human-generated by displaying time-synced cryptographic QR codes and requiring physical interaction. This PRD outlines the requirements for the MVP to be presented to investors and the product development team.

### 1.2 Scope
The MVP will:
- Generate and display QR codes on Apple Watch (watchOS) and Garmin watches (Connect IQ).
- Use sensors to detect human presence.
- Allow users to trigger a new code sequence via a button press.
- Provide a basic cloud-based verification service.
- Include a companion mobile app for verification (iOS/Android).

---

## 2. Stakeholders
- **Product Owner**: [Your Name]
- **Development Team**: To be assigned (iOS, Garmin Connect IQ, backend developers)
- **Target Users**: Content creators, journalists, legal professionals
- **Investors**: Seeking to fund innovative 0x0a0 (xAI id) and 0x0b0 (xAI id)

---

## 3. Requirements

### 3.1 Functional Requirements
1. **Code Generation**:
   - Generate a time-synced cryptographic code (HMAC-based) every second using a secret key stored in the smartwatch’s secure enclave.
   - Display the code as a QR code on the watch face.
2. **Human Presence Detection**:
   - Use heart rate and skin contact sensors to confirm the watch is being worn.
   - Codes are only generated if human presence is detected.
3. **Physical Interaction**:
   - Apple Watch: Press the side button to trigger a new code sequence.
   - Garmin: Press the “Start” button to trigger a new code sequence.
   - Display a confirmation (green flash) after interaction.
4. **Verification Service**:
   - Cloud-based service (AWS) to validate QR codes using the public key.
   - Accessible via a companion mobile app (iOS/Android).
5. **Companion App**:
   - Scan QR codes from videos to verify authenticity.
   - Display verification results (e.g., “Video Authenticated” or “Invalid”).

### 3.2 Non-Functional Requirements
- **Performance**: Code generation and display must not drain more than 5% battery per hour.
- **Compatibility**: Support Apple Watch (watchOS 9+) and Garmin watches (Connect IQ 4+).
- **Security**: Secret key stored securely in the device’s enclave; codes unforgeable without the key.
- **UI**: High-contrast, minimalist design with no animations to optimize for small screens.

---

## 4. Technical Specifications
- **Platforms**: watchOS (Swift), Connect IQ (Monkey C), AWS (Node.js for verification service), React Native (companion app).
- **APIs**:
  - watchOS: HealthKit for heart rate, Secure Enclave for key storage.
  - Connect IQ: Sensor API for heart rate, Storage API for key management.
- **Backend**: AWS Lambda for verification, DynamoDB for logging (optional blockchain integration in future phases).

---

## 5. User Interface
- **Watch App**:
  - Main Screen: QR code in the center, “Press [Button] to Authenticate” text below.
  - Interaction: Button press triggers a green flash confirmation.
- **Companion App**:
  - Home Screen: “Scan QR Code” button.
  - Result Screen: Displays verification outcome.

---

## 6. Development Timeline
- **Phase 1 (1 Month)**: Research, setup watchOS and Connect IQ environments, design UI.
- **Phase 2 (2 Months)**: Develop code generation, sensor integration, and UI for both platforms.
- **Phase 3 (1 Month)**: Build verification service and companion app.
- **Phase 4 (1 Month)**: Testing, bug fixes, and submission to app stores.

---

## 7. Success Metrics
- **Downloads**: 5,000 downloads within 3 months of launch.
- **Usage**: 80% of users successfully authenticate at least one video.
- **Retention**: 60% of users remain active after 1 month.

---

## 8. Risks and Mitigations
- **Risk**: Limited battery life on smartwatches.
  - **Mitigation**: Optimize code generation and avoid animations.
- **Risk**: Compatibility issues with older devices.
  - **Mitigation**: Test on a range of Apple Watch and Garmin models.
- **Risk**: Security breach of secret key.
  - **Mitigation**: Use device secure enclave and implement remote deactivation.

---

## 9. Future Enhancements
- Blockchain integration for tamper-proof verification.
- Support for additional platforms (e.g., Wear OS).
- Enhanced companion app features (e.g., video upload for verification).